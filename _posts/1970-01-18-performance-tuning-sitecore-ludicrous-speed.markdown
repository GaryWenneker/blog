---
layout: post
title: 'Performance tuning Sitecore: Ludicrous Speed!'
date: 1970-01-18 17:15:21.000000000 +01:00
---
<p>Developing with Sitecore and specifically deployments for me is similar to developing with SharePoint in the old days. You have to deploy a bunch of files to the server and IIS has to spin up again. Depending on the amount of processes, services and other stuff this can take a while. So when we want to debug our code and do a couple of deployments the amount of waiting time stacks up. I easily could open an extra tab in my browser and load up Netflix to watch a new episode of whatever series that's running at the moment.</p><p>And there the performance sinks in! Really! Haven't seen that before on Sitecore 8.x, but now in 9.01 the performance of spinning up Sitecore, getting to the log screen, the Content Editor and the Experience Editor. Also we've got SXA running. And no, I'll show later that performance on that is just fine.</p><figure class="kg-image-card"><img src="https://i.giphy.com/3NtY188QaxDdC.gif" class="kg-image"></figure><h2 id="profiling-the-web-application">Profiling the Web Application</h2><p>Let's jump in right away with the log which I created with Ants Profiler:</p><figure class="kg-image-card"><img src="https://ghost-azure-gary.azurewebsites.net/content/images/2018/05/antz.jpg" class="kg-image"></figure><p>What show immediately are the red lines on the right indicating something's taking a lot of time. Too much time: <strong>46 seconds</strong>! And no managed code has been executed yet. Executing the managed code is fast and shows no sign of being sluggish. Then what could it be and what is this Rebus? I grabbed my bible called Google and searched for the keywords "<a href="https://www.google.nl/search?q=sitecore+rebus&amp;oq=sitecore+rebus&amp;aqs=chrome..69i57.3156j0j7&amp;sourceid=chrome&amp;ie=UTF-8">sitecore rebus</a>". Got some hits which pointed to EXM (Email Experience Manager for Sitecorer 9). Then I stumbled upon the following:</p><figure class="kg-image-card"><img src="https://ghost-azure-gary.azurewebsites.net/content/images/2018/05/rebus.jpg" class="kg-image"></figure><p>So Rebus is used by EXM to handle communication between CM's and CD's. As far as I can see it relies on SQL Server. And some magic is happening while spinning up the server.</p><h2 id="the-variables">The variables</h2><p>Having a slow environment I tried to do what most developers would try:</p><ul><li>do an IISRESET</li><li>reset SQL Server</li><li>reset Solr</li><li>disable some services which a not needed during development</li><li>full reset of my laptop</li></ul><blockquote>a full reset of my laptop gave me back the performance but after a while it got slow again</blockquote><h3 id="solr-indexes">Solr indexes</h3><p>A colleague of mine pointed out that Sitecore 9 highly depends on Solr indexes and working with the Experience Editor means the indexes should be in order otherwise you will get a big performance penalty. There are some ways you can trigger this reindexing:</p><ul><li>Indexing Manager - From the Launch Pad go to the Control Panel and access the Indexing Manager. Here choose to select all indexes and click Rebuild</li><li>Content Manager - From the Content Manager you select the Developer tab and click the button 'Rebuild all'. This does the same but with less steps to take. We developers tend to be lazy ;-)</li></ul><p>The effect of the indexing was great and gave me the feeling of a faster experience but within 1 day to a few weeks I had to do this over and over again. Still had the feeling this wasn't the solution. I thought to give it a few weeks, also being busy on several projects.</p><figure class="kg-image-card"><img src="https://i.giphy.com/LGVQJ4cQGPs8o.gif" class="kg-image"></figure><h3 id="turning-on-exm">Turning on EXM</h3><p>Thinking it was EXM's problem I opened my web.config and changed the following key which I set from <code>yes</code> to <code>no</code>:</p><p><code>&lt;add key="exmEnabled:define" value="yes" /&gt;</code></p><p>This increased the performance of spinning up IIS with <strong>30%!!!</strong></p><figure class="kg-image-card"><img src="https://i.giphy.com/nhRNRSBQrc1AQ.gif" class="kg-image"></figure><h2 id="forcing-sitecore-to-go-ludicrous-speed">Forcing Sitecore to go ludicrous speed</h2><figure class="kg-image-card"><img src="https://i.giphy.com/CZsmjr4dtoCuQ.gif" class="kg-image"></figure><p>The show isn't over. This is a great way to gain some performance but when we need the EXM we cannot turn it off. So what next? Then I remembered from my earlier SharePoint projects that a huge gain you'll get by setting one variable in SQL Server:</p><figure class="kg-image-card"><img src="https://ghost-azure-gary.azurewebsites.net/content/images/2018/05/2018-05-26-14_36_11-Microsoft-SQL-Server-Management-Studio--Administrator-.png" class="kg-image"></figure><p>By default when installing SQL Server it will set the property <code>Max Degree of Parallelism</code> to <code>0</code>. But when you want SQL Server to use multi cores you need to set this value to <code>8</code> (amount of my virtual cores) and restart the service.</p><p>And now a summary of times measured with and without EXM enabled after setting the value to <code>1</code> including SXA installed (and no power cord attached to my laptop):</p><p>EXM onEXM off<em>spinning up to login page</em>40s17s<em>login page to Control Panel</em>5s3s<em>from Control Panel to Content Editor</em>6s3s<em>from Content Editor to Experience Editor</em>16s13s</p><p>So, glad we fixed it :-)</p><figure class="kg-image-card"><img src="https://i.giphy.com/aqYZmnZwfvTmo.gif" class="kg-image"></figure>
