---
layout: post
title: 'How to work with Git: Left Git or right Git?'
description: >-
  Learn how to build a Sitecore JSS  application that uses GraphQL services.
date: 2018-09-10 08:21:12.000000000 +01:00
image: >-
  https://images.unsplash.com/photo-1415356838286-df6fd593e8b3?ixlib&#x3D;rb-0.3.5&amp;q&#x3D;80&amp;fm&#x3D;jpg&amp;crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;w&#x3D;1080&amp;fit&#x3D;max&amp;ixid&#x3D;eyJhcHBfaWQiOjExNzczfQ&amp;s&#x3D;1df6012e22d021f19c544e616f90caf1
optimized_image: >-
  https://images.unsplash.com/photo-1415356838286-df6fd593e8b3?ixlib&#x3D;rb-0.3.5&amp;q&#x3D;80&amp;fm&#x3D;jpg&amp;crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;w&#x3D;1080&amp;fit&#x3D;max&amp;ixid&#x3D;eyJhcHBfaWQiOjExNzczfQ&amp;s&#x3D;1df6012e22d021f19c544e616f90caf1
category: blog
tags:
  - git
  - vsts
  - sitecore
author: garywenneker
paginate: true
---
<p>I know this post hasn't to do anything with Sitecore but also with Sitecore development we want to make sure our sourcecode is protected in some repository. In my past live I had to use Microsoft's source repository VSS to store my code and collaborate with my fellow colleagues. Even with VSTS this was still the way to go. And then it all changed when VSTS had the option to use it as a Git repository. All open source developers probably will laugh in my face right now but for me it was the first time I actually had fun with working in git. The old way I didn't find very flexible.</p><p>This post is for you when you start with Git, or when you want to know how to choose between Merge or Rebase. I also cover the apps you can use and the commands from the git command-line. If you know this, read no further cuz it's TL;DR ;-)</p><figure class="kg-image-card"><img src="https://i.giphy.com/QyZcYUNTHXZAs.gif" class="kg-image"></figure><h2 id="starting-with-git">Starting with Git</h2><p>The difference between Git and the old-fashioned way woring with VSTS is that VSTS relies that your changes are added onto the changes of others. Before checking in your code you need to keep the code in sync. If you don't you'll find yourself spending a lot of time resolving code conflicts.<br>Git works in a different way. In Git you will need to use a so called feature branch. What happens under the hood is that the entire code base is put into your feature folder. While developing and you are the sole one working on the feature you're the only one committing to this branch. This means if you want to merge your code with the actual develop branch you need to check for differences. When working with more people on a feature branch code conficts may occur more often. Then you need to communicate with your colleagues, ohboy! :-)</p><p>Setting up Git on your machine is extremely easy. Just <a href="https://git-scm.com/download/win">download</a> the installer and run it (next next next etc).</p><h2 id="choosing-your-git-tooling">Choosing your Git tooling</h2><p>So there's a lot of tooling available and thanks to the community and vendors you can choose between a lot of <a href="https://git-scm.com/downloads/guis">apps</a>.</p><figure class="kg-image-card"><img src="https://i.giphy.com/2yFHxHskkayze.gif" class="kg-image"></figure><h3 id="sourcetree">SourceTree</h3><p>This was the first app to work with. It has a nice interface and is built on top of a bunch of open source tooling. A great feature is having the option to push after a commit with a comment. What I don't like that much is that I have to swith to a different branch when I want to pull the latest changes.</p><figure class="kg-image-card"><img src="/assets/img/uploads/2018/05/sourcetree.png" class="kg-image"></figure><h3 id="gitkraken">GitKraken</h3><p>This is what I find very strong within GitKraken. Pulling a different branch while working in a different branch. The graph has a nice overview and also staging, stashing and popping is extremely easy. Initiating Git Flow is a little stashed away in the settings configuration of the app.</p><figure class="kg-image-card"><img src="/assets/img/uploads/2018/05/gk-pr-example.gif" class="kg-image"></figure><blockquote>Gitflow Workflow is a Git workflow design that was first published and made popular by <a href="http://nvie.com/posts/a-successful-git-branching-model/">Vincent Driessen at nvie</a>. The Gitflow Workflow defines a strict branching model designed around the project release. This provides a robust framework for managing larger projects.</blockquote><h4 id="creating-feature-branches">Creating feature branches</h4><ul><li>Get your local repository up to date with TFS  git fetch origin  </li><li>Switch to the develop branch  git checkout develop  </li><li>Pull in the latest commits  git pull  </li><li>Create a new branch  git checkout -b feature/my-awesome-feature  </li><li>Set the upstream so the branch can be tracked on TFS  git push --set-upstream origin feature/my-awesome-feature  </li></ul><h3 id="git-console">Git console</h3><p>Honestly I still use GitKraken for doing commits but with the integration with Visual Studio Code this has become obsolete. I just use it to see the flow. Make sure to add the number of your PBI or task ID e.g. #26543 this will associate that item to your commit. When creating the pull request and the VSTS-template forces you to add the PBI association, you don't need to add it because it is there when you added the id in the commit. So make sure when squashing that your id does not get omitted.</p><h2 id="merge">Merge</h2><p>So before creating a pull request we need to add our feature code to the code from the develop branch. And because wasn't familiar with Git strategies I merged my feature code into the develop branch. This is not a wrong thing to do but in the end the graph will not show a nice historical single line</p><figure class="kg-image-card"><img src="/assets/img/uploads/2018/05/1_63ADMLYFTkYCw1CiGVc_iQ.png" class="kg-image"></figure><h3 id="pros">Pros</h3><ul><li>Simple to use and understand.</li><li>Maintains the original context of the source branch.</li><li>Existing commits on the source branch are unchanged and remain valid.</li></ul><h3 id="cons">Cons</h3><ul><li>When multiple people work on the same branch, the merges don’t serve any useful historic purpose and create clutter.</li></ul><h2 id="rebase">Rebase</h2><p>Rebase is a different story and requires some insights of how git works. Result of rebasing is that you can squash your commits into one and berge them back into the develop branch</p><figure class="kg-image-card"><img src="/assets/img/uploads/2018/05/1_FNaZp740nmp8wz851BqcAg.png" class="kg-image"></figure><h3 id="pros-1">Pros</h3><ul><li>Simplifies your history</li><li>Clutter free branches and pull requests</li></ul><h3 id="cons-1">Cons</h3><ul><li>Enable force push on VSTS. This may damage your Git repo and you should understand what you are doing!</li><li>Slightly more complex. Each commit is rebased in order, and a conflict will interrupt the process of rebasing multiple commits</li><li>Rewriting of history has a high impact on fellow developers.</li></ul><h3 id="console-actions">Console actions</h3><p>When working with the Git command line we want to do the following things to Rebase</p><ul><li><code>git status</code> - check if you have no issues or even when you forgot to commit.</li><li><code>git log</code> or <code>git log --graph --oneline</code> - show all the commits</li><li><code>git rebase -i HEAD~2</code>- rebase interactively so you can squash the commits. This allows you to merge your commits.</li><li><code>git rebase develop</code> - does the actual rebase onto the develop branch.</li><li><code>git push -f</code> - force push your changes.</li><li>Now you're done to create your pull request.</li></ul><h3 id="tips-when-doing-a-rebase">Tips when doing a Rebase</h3><ul><li>Squash before rebase, only keep handfull of commits</li><li>Always keep refactorings and renames as separate commits</li></ul><h3 id="pitfalls-when-doing-a-rebase">Pitfalls when doing a Rebase</h3><figure class="kg-image-card"><img src="https://i.giphy.com/3o6Zt1TrXW8uW2lE2I.gif" class="kg-image"></figure><ul><li>Squash / rebase is a destructive action, which requires <code>git push –-force</code></li><li>Strongly advised to point the remote <code>origin</code> to your private fork</li><li>Never rebase master / develop / release branches</li></ul><blockquote>To set your editor to e.g. Notepad++ use the following commands: (<strong>x86</strong>) <code>git config core.editor "'C:\Program Files (x86)\Notepad++\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"</code> or (<strong>x64</strong>) <code>git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"</code>. Setting it back to vm <code>git config --global core.editor vim</code></blockquote>
